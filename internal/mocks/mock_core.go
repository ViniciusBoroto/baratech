// Code generated by MockGen. DO NOT EDIT.
// Source: C:/Users/vinicius/Documents/Projects/dreampc/domain/core.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCoreUsecase is a mock of CoreUsecase interface.
type MockCoreUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockCoreUsecaseMockRecorder
}

// MockCoreUsecaseMockRecorder is the mock recorder for MockCoreUsecase.
type MockCoreUsecaseMockRecorder struct {
	mock *MockCoreUsecase
}

// NewMockCoreUsecase creates a new mock instance.
func NewMockCoreUsecase(ctrl *gomock.Controller) *MockCoreUsecase {
	mock := &MockCoreUsecase{ctrl: ctrl}
	mock.recorder = &MockCoreUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoreUsecase) EXPECT() *MockCoreUsecaseMockRecorder {
	return m.recorder
}

// MinimumBudget mocks base method.
func (m *MockCoreUsecase) MinimumBudget() (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MinimumBudget")
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MinimumBudget indicates an expected call of MinimumBudget.
func (mr *MockCoreUsecaseMockRecorder) MinimumBudget() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MinimumBudget", reflect.TypeOf((*MockCoreUsecase)(nil).MinimumBudget))
}
