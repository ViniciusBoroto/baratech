// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	domain "dreampc/domain"

	mock "github.com/stretchr/testify/mock"
)

// CpuRepository is an autogenerated mock type for the CpuRepository type
type CpuRepository struct {
	mock.Mock
}

type CpuRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *CpuRepository) EXPECT() *CpuRepository_Expecter {
	return &CpuRepository_Expecter{mock: &_m.Mock}
}

// All provides a mock function with no fields
func (_m *CpuRepository) All() ([]domain.Cpu, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 []domain.Cpu
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.Cpu, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.Cpu); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Cpu)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CpuRepository_All_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'All'
type CpuRepository_All_Call struct {
	*mock.Call
}

// All is a helper method to define mock.On call
func (_e *CpuRepository_Expecter) All() *CpuRepository_All_Call {
	return &CpuRepository_All_Call{Call: _e.mock.On("All")}
}

func (_c *CpuRepository_All_Call) Run(run func()) *CpuRepository_All_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CpuRepository_All_Call) Return(_a0 []domain.Cpu, _a1 error) *CpuRepository_All_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CpuRepository_All_Call) RunAndReturn(run func() ([]domain.Cpu, error)) *CpuRepository_All_Call {
	_c.Call.Return(run)
	return _c
}

// NewCpuRepository creates a new instance of CpuRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCpuRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CpuRepository {
	mock := &CpuRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
