// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	domain "dreampc/domain"

	mock "github.com/stretchr/testify/mock"
)

// BuildUsecase is an autogenerated mock type for the BuildUsecase type
type BuildUsecase struct {
	mock.Mock
}

type BuildUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *BuildUsecase) EXPECT() *BuildUsecase_Expecter {
	return &BuildUsecase_Expecter{mock: &_m.Mock}
}

// BestByBudget provides a mock function with given fields: budget
func (_m *BuildUsecase) BestByBudget(budget domain.Money) (domain.Build, error) {
	ret := _m.Called(budget)

	if len(ret) == 0 {
		panic("no return value specified for BestByBudget")
	}

	var r0 domain.Build
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Money) (domain.Build, error)); ok {
		return rf(budget)
	}
	if rf, ok := ret.Get(0).(func(domain.Money) domain.Build); ok {
		r0 = rf(budget)
	} else {
		r0 = ret.Get(0).(domain.Build)
	}

	if rf, ok := ret.Get(1).(func(domain.Money) error); ok {
		r1 = rf(budget)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BuildUsecase_BestByBudget_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BestByBudget'
type BuildUsecase_BestByBudget_Call struct {
	*mock.Call
}

// BestByBudget is a helper method to define mock.On call
//   - budget domain.Money
func (_e *BuildUsecase_Expecter) BestByBudget(budget interface{}) *BuildUsecase_BestByBudget_Call {
	return &BuildUsecase_BestByBudget_Call{Call: _e.mock.On("BestByBudget", budget)}
}

func (_c *BuildUsecase_BestByBudget_Call) Run(run func(budget domain.Money)) *BuildUsecase_BestByBudget_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.Money))
	})
	return _c
}

func (_c *BuildUsecase_BestByBudget_Call) Return(_a0 domain.Build, _a1 error) *BuildUsecase_BestByBudget_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BuildUsecase_BestByBudget_Call) RunAndReturn(run func(domain.Money) (domain.Build, error)) *BuildUsecase_BestByBudget_Call {
	_c.Call.Return(run)
	return _c
}

// NewBuildUsecase creates a new instance of BuildUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBuildUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *BuildUsecase {
	mock := &BuildUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
